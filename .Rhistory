packrat::install.packages("ggplot2", dependencies = TRUE)
packrat::set_opts(external.packages = c(""))
install.packages("ggplot2", dependencies = TRUE)
packrat::install_github("rCharts", "ramnathv")
data(economics, package = "ggplot2")
econ <- transform(economics, date = as.character(date))
library(rCharts)
m1 <- mPlot(x = "date", y = c("psavert", "uempmed"), type = "Line",
data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1$print("chart2")
m1
hair_eye_male <- subset(as.data.frame(HairEyeColor), Sex == "Male")
head(hair_eye_male)
n1 <- nPlot(Freq ~ Hair, group = "Eye", data = hair_eye_male,
type = "multiBarChart")
n1$print("chart3")
n1
packrat::restore(prompt = FALSE)
packrat::install_github("woobe/rPlotter")
source("http://bioconductor.org/biocLite.R")
biocLite("EBImage")
packrat::install_github("rblocks", "ramnathv")
packrat::install_github("woobe/rPlotter")
library(rCharts)
library(rPlotter)
dat <- Theoph
p1 <- rCharts$new()
p1$setLib(system.file('parcoords', package = 'rCharts'))
p1$set(padding = list(top = 50, bottom = 50,
left = 50, right = 50),
width = 960, height = 500)
set.seed(1234)
n_col <- length(unique(dat$Subject))
pal <- colorRampPalette(extract_colours(
"http://www.allfreevectors.com/images/Free%20Vector%20Bart%20Simpson%2002%20The%20Simpsons2980.jpg",
7), interpolate = "spline")(n_col)
p1$set(
data = toJSONArray(dat, json = F),
range = unique(dat$Subject),
colorby = 'Subject',
colors = pal)
p1
p1$print("parcoords")
p1
p1$setTemplate(afterScript = '<script></script>')
p1
p1$save("index.html", cdn=TRUE)
pal
rChart <- rCharts$new()
rChart$setLib('http://timelyportfolio.github.io/rCharts_d3_horizon/libraries/widgets/d3_horizon')
rChart$setTemplate(script = 'http://timelyportfolio.github.io/rCharts_d3_horizon/libraries/widgets/d3_horizon/layouts/d3_horizon_smallmultiple.html')
rChart$set(
bands = 3,
mode = "mirror",
interpolate = "basis",
width = 700,
height = 300
)
require(quantmod)
SP500 <- to.monthly(
getSymbols("^GSPC", from = "1990-01-01", auto.assign = FALSE)
)[,4]
install.packages("quantmod")
require(quantmod)
SP500 <- to.monthly(
getSymbols("^GSPC", from = "1990-01-01", auto.assign = FALSE)
)[,4]
Nasdaq <- to.monthly(
getSymbols("^IXIC", from = "1990-01-01", auto.assign = FALSE)
)[,4]
Dax <- to.monthly(
getSymbols("^GDAXI", from = "1990-01-01", auto.assign = FALSE)
)[,4]
prices <- merge(SP500,Nasdaq,Dax)
returns <- na.omit(ROC(prices, type = "discrete", n = 12))
returns.df <- cbind(
as.numeric(as.POSIXct(as.Date(index(returns)))),
coredata(returns)
)
colnames(returns.df) <- c("date","SP500","Nasdaq","DAX")
rChart$set(data = returns.df)
rChart$set(x = "date")
rChart
p1$getLib()
summary(p1)
p1$lib
summary(p1)
p1 <- rCharts$new()
p1$setLib(system.file('parcoords', package = 'rCharts'))
p1$lib
p1$.->lib
p1$getClass
p1$params
p1$set(padding = list(top = 50, bottom = 50,
left = 50, right = 50),
width = 960, height = 500)
p1$params
?setLib
?rCharts
packrat::install_github("ramnathv/rCharts@dev")
library(rCharts)
p1 <- rCharts$new()
p1$setLib(system.file('parcoords', package = 'rCharts'))
## Adjust output size
p1$set(padding = list(top = 50, bottom = 50,
left = 50, right = 50),
width = 960, height = 500)
## Brew some colours with rPlotter x Bart Simpson
set.seed(1234)
n_col <- length(unique(dat$Subject))
pal <- colorRampPalette(extract_colours(
"http://www.allfreevectors.com/images/Free%20Vector%20Bart%20Simpson%2002%20The%20Simpsons2980.jpg",
7), interpolate = "spline")(n_col)
p1$set(
data = toJSONArray(dat, json = F),
range = unique(dat$Subject),
colorby = 'Subject',
colors = pal)
p1$setTemplate(afterScript = '<script></script>')
p1$save("index.html", cdn=TRUE)
p1$setLib("http://rcharts.github.io/parcoords/libraries/widgets/parcoords")
p1$save("index.html", cdn=TRUE)
p1
p1$save("index.html")
packrat::set_opts(vcs.ignore.src = TRUE)
packrat::get_opts
source("http://bioconductor.org/biocLite.R")
source("http://bioconductor.org/biocLite.R")
biocLite("GSReg")
biocLite()
biocLite("BiocUpgrade")
biocLite("BiocUpgrade", useDevel)
?useDevel
library(BiocInstaller)
useDevel()
biocLite("GSReg")
library(GSReg)
?GSReg
browseVignettes(GSReg)
browseVignettes("GSReg")
data(GSBenchMarkDatasets)
library(GSBenchMark)
biocLite("GSBenchMark")
library(GSBenchMark)
data(GSBenchMarkDatasets)
data(diracpathways)
data(GSBenchMark.Dataset.names)
print(GSBenchMark.Dataset.names)
dataSetName <- GSBenchMark.Dataset.names[[7]]
data(list = dataSetName)
nanGenes <- rowSums(is.nan(exprsdata)) > 0
sum(nanGenes)
sum(sum(is.nan(exprsdata)))
sum(sum(is.na(exprsdata)))
View(exprsdata)
exprsdata <- exprsdata[-nanGenes, ]
nanGenes <- rowSums(is.nan(exprsdata)) > 0
data(list = dataSetName)
exprsdata <- exprsdata[!nanGenes, ]
nanGenes
data(list = dataSetName)
nanGenes <- rowSums(is.nan(exprsdata)) > 0
nanGenes
exprsdata <- exprsdata[!nanGenes, ]
geneNames <- rownames(exprsdata)
head(geneNames)
?GSReg.GeneSets.DIRAC
data(diracpathways)
phenotypes
diracResult <- GSReg.GeneSets.DIRAC(exprsdata, diracpathways, phenotypes, 10)
str(diracResult)
help(GSReg:::GSReg.DIRAC.Pathways)
GSReg.DIRAC.Pathways
getMethods(GSReg)
getMethods("GSReg")
getMethods(GSReg.GeneSets.DIRAC)
getMethod(GSReg.GeneSets.DIRAC)
?GSReg.GeneSets.DIRAC
show(GSReg.GeneSets.DIRAC)
show(GSReg.DIRAC.Pathways)
showMethods(GSReg.GeneSets.DIRAC)
getS3method("GSReg.DIRAC.Pathways")
getS3method("GSReg.GeneSets.DIRAC", "numeric")
getMethod("GSReg.GeneSets.DIRAC", "numeric")
getMethod(GSReg.GeneSets.DIRAC, "numeric")
getS3method(GSReg.GeneSets.DIRAC, "numeric")
getS3method("GSReg.GeneSets.DIRAC", "default")
getMethod("GSReg.GeneSets.DIRAC", "default")
library(GSBenchMark)
library(GSReg)
data(diracpathways)
data(GSBenchMarkDatasets)
print(GSBenchMark.Dataset.names)
dataSetName <- GSBenchMark.Dataset.names[[4]]
data(list = dataSetName)
nanGenes <- rowSums(is.nan(exprsdata)) > 0
exprsdata <- exprsdata[!nanGenes, ]
geneNames <- rownames(exprsdata)
head(geneNames)
diracResult <- GSReg.GeneSets.DIRAC(exprsdata, diracpathways, phenotypes, 10)
summmary(diracResult)
summary(diracResult)
head(diracResult$pvalues)
min(diracResult$pvalues)
?GSReg.GeneSets.DIRAC
sigPathways <- which(diracResult$pvalues < 0.05)
dysregulatedPathways = rbind(diracResult$mu1[sigPathways],
diracResult$mu2[sigPathways],
diracResult$pvalues[sigPathways]);
rownames(dysregulatedPathways) <- c("mu1", "mu2", "pvalues");
print(dysregulatedpathways[,1:5])
print(dysregulatedPathways[,1:5])
View(dysregulatedPathways)
print(GSBenchMark.Dataset.names)
dataSetName <- GSBenchMark.Dataset.names[[7]]
data(list = dataSetName)
nanGenes <- rowSums(is.nan(exprsdata)) > 0
exprsdata <- exprsdata[!nanGenes, ]
geneNames <- rownames(exprsdata)
head(geneNames)
diracResult <- GSReg.GeneSets.DIRAC(exprsdata, diracpathways, phenotypes, 10)
sigPathways <- which(diracResult$pvalues < 0.05)
dysregulatedPathways <- rbind(diracResult$mu1[sigPathways],
diracResult$mu2[sigPathways],
diracResult$pvalues[sigPathways]);
rownames(dysregulatedPathways) <- c("mu1", "mu2", "pvalues");
print(dysregulatedPathways[,1:5])
print(GSBenchMark.Dataset.names)
dataSetName <- GSBenchMark.Dataset.names[[4]]
data(list = dataSetName)
nanGenes <- rowSums(is.nan(exprsdata)) > 0
exprsdata <- exprsdata[!nanGenes, ]
geneNames <- rownames(exprsdata)
head(geneNames)
diracResult <- GSReg.GeneSets.DIRAC(exprsdata, diracpathways, phenotypes, 10)
sigPathways <- which(diracResult$pvalues < 0.05)
dysregulatedPathways <- rbind(diracResult$mu1[sigPathways],
diracResult$mu2[sigPathways],
diracResult$pvalues[sigPathways]);
rownames(dysregulatedPathways) <- c("mu1", "mu2", "pvalues");
print(dysregulatedPathways[,1:5])
packrat::restore(prompt = FALSE)
packrat::snapshot(prompt = FALSE)
packrat::restore(prompt = FALSE)
packrat::snapshot(prompt = FALSE)
packrat::restore(prompt = FALSE)
packrat::restore(prompt = FALSE, overwrite.dirty = TRUE)
packrat::snapshot(prompt = FALSE)
library(GSBenchMark)
library(GSReg)
data(diracpathways)
useDevel()
library(BiocInstaller)
source("http://bioconductor.org/biocLite.R")
biocLite()
biocLite("BiocUpgrade")
install.packages("BiocInstaller",
repos="http://www.bioconductor.org/packages/3.0/bioc")
biocLite()
library(BiocInstaller)
useDevel()
biocLite("GSReg")
packrat::snapshot(prompt = FALSE)
packrat::disable()
packrat::init()
packrat::init()
packrat::status
packrat::status()
packrat::init()
